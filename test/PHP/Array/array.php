<?php


//
//
////все ключи будут преобразоваться в string ассоциативный массив
////Поскольку все ключи в приведённом примере преобразуются к 1, значение будет перезаписано на каждый новый элемент
//// и останется только последнее присвоенное значение — «d».
//$array = array(
//    1    => "a",
//    "1"  => "b",
//    1.5  => "c",
//    true => "d",
//);
////var_dump($array);
//
////подробно как работает массивы в php
//$array2 = array(
//    1    => 'a',
//    '1'  => 'b', // значение «b» перезапишет значение «a»
//    1.5  => 'c', // значение «c» перезапишет значение «b»
//    -1 => 'd',
//    '01'  => 'e', // поскольку это не целочисленная строка, она НЕ перезапишет ключ 1
//    '1.5' => 'f', // поскольку это не целочисленная строка, она НЕ перезапишет ключ 1
//    true => 'g', // значение «g» перезапишет значение «c»
//    false => 'h',
//    '' => 'i',
//    null => 'j', // значение «j» перезапишет значение «i»
//    'k', // значение «k» присваивается ключу 2. Потому что самый большой целочисленный ключ до этого был 1
//    2 => 'l', // значение «l» перезапишет значение «k»
//);
//
////var_dump($array2);



//// Создаём простой массив.
//$array = array(1, 2, 3, 4, 5);
//print_r($array);
//
//// Теперь удаляем каждый элемент, но массив оставляем нетронутым:
//foreach ($array as $i => $value) {
//    unset($array[$i]);
//}
//print_r($array);
//
//// Добавляем элемент (обратите внимание, что новым ключом будет 5, а не 0).
//$array[] = 6;
//print_r($array);
////
////// Переиндексация:
//$array = array_values($array);
//$array[] = 7;
//print_r($array);

//Деструктуризация массива

//$source_array = ['foo', 'bar', 'baz'];
//[$bar, $foo, $baz] = $source_array;
//
//echo $foo;    // выведет «foo»
//echo $bar;    // выведет «bar»
//echo $baz;
//
//$source_array = [
//    [1, 'John', '32'],
//    [2, 'Jane', '32'],
//];
//foreach ($source_array as [$id, $name, $age]) {
//    echo $id.': '.$name . '-' .$age . PHP_EOL;
//}

//$users = [
//    ['name' => 'John', 'age' => 31],
//    ['name' => 'Alice', 'age' => 25],
//    ['name' => 'Bob', 'age' => 35]
//];
//
//$filteredUsers = array_filter($users, function ($user) {
//    ['age' => $age] = $user;
//    return $age > 30;
//});
//
//
////var_dump($filteredUsers);
//
//$array = array(1=>1,2=> 2);
//
//var_dump($array);


// Применение короткого синтаксиса массива.
// Работает также с синтаксисом array().
//$arr1 = [1, 2, 3];
//$arr2 = [$arr1]; // [1, 2, 3]
//$arr3 = [0, ...$arr1]; // [0, 1, 2, 3]
//$arr4 = [...$arr1, ...$arr2, 111]; // [1, 2, 3, 1, 2, 3, 111]
//$arr5 = [...$arr1, ...$arr1]; // [1, 2, 3, 1, 2, 3]

//function getArr() {
//    return ['a', 'b'];
//}
//
//$arr6 = [...getArr(), 'c' => 'd']; // ['a', 'b', 'c' => 'd']
//
//


//распаковка массива со строковым ключом
//$arr1 = [1, 2, 3];
//$arr2 = ['a' => 4];
//$arr3 = [...$arr1, ...$arr2];
//
//var_dump($arr3);

//ссылка массива $arr1 = $arr3
$arr1 = array(2, 3);

$arr3 = &$arr1;
$arr3[] = 4;

var_dump($arr1);


//Конфликт по передачи по ссылки. Пример!
function array_baz(array &$param): void
{
    $param = 1;
}

$var = [];
array_baz($var);//теперь переменная $var = инт
var_dump($var);
//array_baz($var);// при повторном вызове будет ошибка